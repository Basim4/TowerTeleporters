import javafx.scene.shape.Rectangle;
import java.util.ArrayList;
import javafx.animation.AnimationTimer;
import javafx.event.EventHandler;
import javafx.scene.input.KeyEvent;
import javafx.scene.layout.Pane;
import javafx.scene.layout.StackPane;
import javafx.scene.paint.*;

public class PlayerIcon extends StackPane {
	private Pane rectangleHouse;
	private Rectangle firstP;
	private Rectangle secondP;
	private boolean p1W, p1A, p1S, p1D, p2Up, p2Left, p2Down, p2Right, inAir1, inAir2;
	private AnimationTimer playerTimer;
	private double changeHorizontal_P1;
	private double changeVertical_P1;
	private double changeHorizontal_P2;
	private double changeVertical_P2;
	private int initX_P1;
	private int initY_P1;
	private int initX_P2;
	private int initY_P2;
	private int HEIGHT;
	private int WIDTH;
	private int previousOneGap;
	private int previousTwoGap;
	private ArrayList<Rectangle> leftPlayerBricks;
	private ArrayList<Rectangle> rightPlayerBricks;
	
	public PlayerIcon(int height, int width, ArrayList<Rectangle> leftBricks, ArrayList<Rectangle> rightBricks) {
		HEIGHT = height;
		WIDTH = width;
		
		initX_P1 = 193;
		initY_P1 = HEIGHT - 15;
		initX_P2 = 597;
		initY_P2 = 750;
		changeHorizontal_P1 = 0;
		changeVertical_P1 = 0;
		changeHorizontal_P2 = 0;
		changeVertical_P2 = 0;
		
		firstP = new Rectangle(initX_P1, initY_P1, 15, 15);
		firstP.setFill(Color.RED);
		secondP = new Rectangle(initX_P2, initY_P2, 20, 20);
		secondP.setFill(Color.GREEN);
		
		rectangleHouse = new Pane();
		playerTimer = new AnimationTimerCharacters();
		
		leftPlayerBricks = leftBricks;
		rightPlayerBricks = rightBricks;
		
		p1W = false;
		p1A = false;
		p1S = false;
		p1D = false;
		p2Up = false;
		p2Left = false;
		p2Down = false;
		p2Right = false;

		rectangleHouse.getChildren().add(firstP);
		rectangleHouse.getChildren().add(secondP);
		this.getChildren().add(rectangleHouse);
		this.setFocusTraversable(true);
		playerTimer.start();
	}
	
	public void movingPlayers(StackPane header) {
		header.setOnKeyPressed(new CharacterMoverPressed());
		header.setOnKeyReleased(new CharacterMoverReleased());
	}
	
	private class CharacterMoverPressed implements EventHandler<KeyEvent> {
		public void handle (KeyEvent e) {
			//check which key is pressed
			switch(e.getCode()){
				//for w go up if in scene range
				case W:
					System.out.println("W True");
					p1W = true;
					inAir1 = true;
					break;
				//for s go down if in scene range
				case S:
					System.out.println("S True");
					p1S = true;
					break;
				//for d go right if in scene range
				case D:
					System.out.println("D True");
					p1D = true;
					break;
				//for a go left if in scene range
				case A:
					System.out.println("A True");
					p1A = true;
					break;
				case UP:
					p2Up = true;
					inAir2 = true;
					break;
				//for s go down if in scene range
				case DOWN:
					p2Down = true;
					break;
				//for d go right if in scene range
				case RIGHT:
					p2Right = true;
					break;
				//for a go left if in scene range
				case LEFT:
					System.out.println("Left True");
					p2Left = true;
					break;
			}
		}
	}
	
	private class CharacterMoverReleased implements EventHandler<KeyEvent> {
		public void handle (KeyEvent e) {
			switch(e.getCode()){
				//for w go up if in scene range
				case W:
					System.out.println("W False" );
					p1W = false;
					break;
					
				//for s go down if in scene range
				case S:
					System.out.println("S False");
					p1S = false;
					break;
				//for d go right if in scene range
				case D:
					System.out.println("D False");
					p1D = false;
					break;
				//for a go left if in scene range
				case A:
					System.out.println("A False");
					p1A = false;
					break;
					
				case UP:
					System.out.println("Up False");
					p2Up = false;
					break;
				//for s go down if in scene range
				case DOWN:
					System.out.println("Down False");
					p2Down = false;
					break;
				//for d go right if in scene range
				case RIGHT:
					System.out.println("Right False");
					p2Right = false;
					break;
				//for a go left if in scene range
				case LEFT:
					System.out.println("Left False");
					p2Left = false;
					break;
			}
		}
	}
	
	public class AnimationTimerCharacters extends AnimationTimer{
		public void handle(long currentTime) {
			int gravity = 1;
			int limit = 40;
			gravity = (1/2) * gravity;
			boolean clipping_p1 = false;
			boolean clipping_p2 = false;
			
			double yPos1 = firstP.getY();
			//System.out.println("W True" + yPos1);
			
			if ((p1A && p1D) || (!p1A && !p1D)) {
				changeHorizontal_P1 *= 0.8;
				
			} else if (p1A && !(p1D)) {
				if (checkLeft(firstP, leftPlayerBricks, rectangleHouse)) {
					changeHorizontal_P1 -= 6.0;
				} else {
					changeHorizontal_P1 = 0.0;
				}
				
			} else if (!(p1A) && p1D) {
				if (checkRight(firstP, leftPlayerBricks, rectangleHouse)) {
					changeHorizontal_P1 += 6.0;
				} else {
					changeHorizontal_P1 = 0.0;
				}
			}
			
			if (changeHorizontal_P1 > 0 && changeHorizontal_P1 < 1) {
				changeHorizontal_P1 = 0;
			}
			if (changeHorizontal_P1 < 0 && changeHorizontal_P1 > -1) {
				changeHorizontal_P1 = 0;
			}
			
			if (changeHorizontal_P1 > 6.0) {
				changeHorizontal_P1 = 6.0;
			}
			if (changeHorizontal_P1 < -6.0) {
				changeHorizontal_P1 = -6.0;
			}
			
			if (p1W && (changeVertical_P1 == 0)) {
				for (int i = 0; i <= limit; i++) {
					if (checkUp(firstP, leftPlayerBricks, rectangleHouse)) {
						changeVertical_P1 --;
					} else {
						limit = i;
					}
				}
			}
			
			if (p2Up && !(p2Down)) {
				changeVertical_P2 = -6.0;
			}
			if (!(p2Up) && p2Down) {
				changeVertical_P2 = 6.0;
			}
			if ((p2Up && p2Down) || !(p2Up && p2Down)) {
				changeVertical_P2 = 0.0;
			}
			if (p2Left && !(p2Right)) {
				changeHorizontal_P2 = -6.0;
			}
			if (!(p2Left) && p2Right) {
				changeHorizontal_P2 = 6.0;
			}
			if ((p2Left && p2Right) || !(p2Left && p2Right)) {
				changeHorizontal_P2 = 0.0;
			}
			
			initX_P1 += changeHorizontal_P1;
			initY_P1 += changeVertical_P1;
			initX_P2 += changeHorizontal_P2;
			initY_P2 += changeVertical_P2;
			
			if (changeVertical_P1 == 0) {
				inAir1 = false;
			} else {
				changeVertical_P1 -= 10;
				inAir1 = true;
			}
			
			if (changeVertical_P2 == 0) {
				inAir2 = false;
			} else {
				inAir2 = true;
			}
		
			if ((initY_P1 < (HEIGHT - (firstP.getHeight()))) && (clipping_p1 == false)) {
				changeVertical_P1 = 1;
			}
			if ((initY_P2 < (HEIGHT - (secondP.getHeight()))) && (clipping_p2 == false)) {
				changeVertical_P2 = 1;
			}
			
			//System.out.println("Clipping 1 and 2: " + clipping_p1 + " " + clipping_p2);
			//System.out.println("inAir1: " + inAir1);
			if ((initY_P1 >= (HEIGHT - 15)) || (firstP.getY() >= (HEIGHT - 15))) {
				changeVertical_P1 = 0;
			} else {
				changeVertical_P1 += 4;	
			}
			/*
			if ((checkDown(firstP, leftPlayerBricks, rectangleHouse))) {
				System.out.println("here checkDown if");
				changeVertical_P1 = 0;
			} else {
				changeVertical_P1 += 4;
			}
			*/
			if (initY_P2 >= (HEIGHT - 15)) {
				changeVertical_P2 = 0;
			} else {
				//System.out.println("here");
				changeVertical_P2 += 10;
			}
			
			firstP.setX(initX_P1);
			firstP.setY(initY_P1);
			secondP.setX(initX_P2);
			secondP.setY(initY_P2);
			
			//UNCOMMENT LINE BELOW IF DEBUG INFORMATION IS NEEDED (WILL SHOW IN CONSOLE)
			//debugInfoToConsole();
		}
	}
	
	public boolean checkUp (Rectangle player, ArrayList<Rectangle> platforms, Pane rectangleHouse) {
		Rectangle playerChecker = new Rectangle(player.getX(), player.getY(), player.getWidth(), player.getHeight());
		
		playerChecker.setY(playerChecker.getY() - 1);
		for (int i = 0; i < platforms.size(); i++) {
			if (playerChecker.intersects(platforms.get(i).getBoundsInLocal())) {
				System.out.println("here Up" + i);
				return false;
			}
		}
		return true;
		
		/*
		double p1_X1, p1_Y1, p1_X2, p1_Y2;
		double p2_X1, p2_Y1, p2_X2, p2_Y2;
		
		for (int i = 0; i < platforms.size(); i++) {
			p1_X1 = player.getX();
			p1_Y1 = player.getY();
			p1_X2 = player.getX() + player.getWidth() - 1;
			p1_Y2 = player.getY();
			p2_X1 = platforms.get(i).getX();
			p2_Y1 = platforms.get(i).getY() + (platforms.get(i).getHeight());
			p2_X2 = platforms.get(i).getX() + platforms.get(i).getWidth() - 1;
			p2_Y2 = platforms.get(i).getY() + (platforms.get(i).getHeight());
			
			p1_X1 = playerChecker.getX();
			p1_Y1 = playerChecker.getY();
			p1_X2 = playerChecker.getX() + playerChecker.getWidth();
			p1_Y2 = playerChecker.getY() + playerChecker.getHeight();
			p2_X1 = platforms.get(i).getX();
			p2_Y1 = platforms.get(i).getY();
			p2_X2 = platforms.get(i).getX() + platforms.get(i).getWidth();
			p2_Y2 = platforms.get(i).getY() + platforms.get(i).getHeight() + 25;
			
			//Rectangle checkthisthing = new Rectangle(p2_X1, p2_Y1, platforms.get(i).getWidth(), platforms.get(i).getHeight() +25);
			//checkthisthing.setFill(Color.rgb(0, 255, 0, 0.9));
			//rectangleHouse.getChildren().add(checkthisthing);
			
			if((p1_X1 <= p2_X2) && (p1_X2 >= p2_X1) && (p1_Y1 <= p2_Y2) && (p1_Y2 >= p2_Y1)) {
				//System.out.println("here" + i);
				return false;
			}
		}
		
		return true;
		
		double endX = player.getX() + player.getWidth() - 1;
		//double endY = player.getY() + player.getWidth();
		//Line playerChecker = new Line(player.getX(), player.getY() - 5, endX, player.getY() - 5);
		playerChecker.setFill(Color.rgb(0, 0, 255, 0));
		playerChecker.setStroke(Color.rgb(0, 0, 255, 0));w
		
		rectangleHouse.getChildren().add(playerChecker);
		//playerChecker.setY(playerChecker.getY() + 1);
		
		for (int i = 0; i < platforms.size(); i++) {
			//if (playerChecker.getBoundsInParent().intersects(platforms.get(i).getX(), platforms.get(i).getY(), platforms.get(i).getWidth(),  platforms.get(i).getHeight())){
			if (playerChecker.getBoundsInParent().intersects(platforms.get(i).getBoundsInParent())) {
					return false;
				}
			} 
		return true;
		*/
		
	}
	
	public boolean checkDown (Rectangle player, ArrayList<Rectangle> platforms, Pane rectangleHouses) {
		Rectangle playerChecker = new Rectangle(player.getX(), player.getY(), player.getWidth(), player.getHeight());
		
		playerChecker.setY(playerChecker.getY() + 1);
		for (int i = 0; i < platforms.size(); i++) {
			if (playerChecker.intersects(platforms.get(i).getBoundsInLocal())) {
				System.out.println("here down" + i);
				return false;
			}
		}
		return true;
	}
	
	public boolean checkLeft (Rectangle player, ArrayList<Rectangle> platforms, Pane rectangleHouses) {
		Rectangle playerChecker = new Rectangle(player.getX(), player.getY(), player.getWidth(), player.getHeight());
		
		playerChecker.setX(playerChecker.getX() - 1);
		for (int i = 0; i < platforms.size(); i++) {
			if (playerChecker.intersects(platforms.get(i).getBoundsInLocal())) {
				System.out.println("here left" + i);
				return false;
			}
		}
		return true;
	}
	
	public boolean checkRight (Rectangle player, ArrayList<Rectangle> platforms, Pane rectangleHouses) {
		Rectangle playerChecker = new Rectangle(player.getX(), player.getY(), player.getWidth(), player.getHeight());
		
		playerChecker.setX(playerChecker.getX() + 1);
		for (int i = 0; i < platforms.size(); i++) {
			if (playerChecker.intersects(platforms.get(i).getBoundsInLocal())) {
				System.out.println("here down" + i);
				return false;
			}
		}
		return true;
	}
	
	public void debugInfoToConsole() {
		
	}
}
